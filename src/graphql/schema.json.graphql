# This file was generated based on "schema.json". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}

type Config {
    _deleted: Boolean
    _lastChangedAt: AWSTimestamp!
    _version: Int!
    createdAt: AWSDateTime!
    gitHubToken: String!
    owner: String
    updatedAt: AWSDateTime!
}

type ModelConfigConnection {
    items: [Config]
    nextToken: String
    startedAt: AWSTimestamp
}

type Mutation {
    createConfig(condition: ModelConfigConditionInput, input: CreateConfigInput!): Config
    deleteConfig(condition: ModelConfigConditionInput, input: DeleteConfigInput!): Config
    updateConfig(condition: ModelConfigConditionInput, input: UpdateConfigInput!): Config
}

type Query {
    getConfig(id: ID!): Config
    listConfigs(filter: ModelConfigFilterInput, limit: Int, nextToken: String): ModelConfigConnection
    syncConfigs(filter: ModelConfigFilterInput, lastSync: AWSTimestamp, limit: Int, nextToken: String): ModelConfigConnection
}

type Subscription {
    onCreateConfig(owner: String!): Config
    onDeleteConfig(owner: String!): Config
    onUpdateConfig(owner: String!): Config
}

enum ModelAttributeTypes {
    _null
    binary
    binarySet
    bool
    list
    map
    number
    numberSet
    string
    stringSet
}

enum ModelSortDirection {
    ASC
    DESC
}

input CreateConfigInput {
    _version: Int
    gitHubToken: String!
}

input DeleteConfigInput {
    _version: Int
    id: ID
}

input ModelBooleanInput {
    attributeExists: Boolean
    attributeType: ModelAttributeTypes
    eq: Boolean
    ne: Boolean
}

input ModelConfigConditionInput {
    and: [ModelConfigConditionInput]
    gitHubToken: ModelStringInput
    not: ModelConfigConditionInput
    or: [ModelConfigConditionInput]
}

input ModelConfigFilterInput {
    and: [ModelConfigFilterInput]
    gitHubToken: ModelStringInput
    not: ModelConfigFilterInput
    or: [ModelConfigFilterInput]
}

input ModelFloatInput {
    attributeExists: Boolean
    attributeType: ModelAttributeTypes
    between: [Float]
    eq: Float
    ge: Float
    gt: Float
    le: Float
    lt: Float
    ne: Float
}

input ModelIDInput {
    attributeExists: Boolean
    attributeType: ModelAttributeTypes
    beginsWith: ID
    between: [ID]
    contains: ID
    eq: ID
    ge: ID
    gt: ID
    le: ID
    lt: ID
    ne: ID
    notContains: ID
    size: ModelSizeInput
}

input ModelIntInput {
    attributeExists: Boolean
    attributeType: ModelAttributeTypes
    between: [Int]
    eq: Int
    ge: Int
    gt: Int
    le: Int
    lt: Int
    ne: Int
}

input ModelSizeInput {
    between: [Int]
    eq: Int
    ge: Int
    gt: Int
    le: Int
    lt: Int
    ne: Int
}

input ModelStringInput {
    attributeExists: Boolean
    attributeType: ModelAttributeTypes
    beginsWith: String
    between: [String]
    contains: String
    eq: String
    ge: String
    gt: String
    le: String
    lt: String
    ne: String
    notContains: String
    size: ModelSizeInput
}

input UpdateConfigInput {
    _version: Int
    gitHubToken: String
}


"The `AWSTimestamp` scalar type provided by AWS AppSync, represents the number of seconds that have elapsed since `1970-01-01T00:00Z`. Negative values are also accepted and these represent the number of seconds till `1970-01-01T00:00Z`.  Timestamps are serialized and deserialized as integers. The minimum supported timestamp value is **`-31557014167219200`** which corresponds to `-1000000000-01-01T00:00Z`. The maximum supported timestamp value is **`31556889864403199`** which corresponds to `1000000000-12-31T23:59:59.999999999Z`."
scalar AWSTimestamp

"The `AWSDateTime` scalar type provided by AWS AppSync, represents a valid ***extended*** [ISO 8601 DateTime](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) string. In other words, this scalar type accepts datetime strings of the form `YYYY-MM-DDThh:mm:ss.SSSZ`.  The scalar can also accept "negative years" of the form `-YYYY` which correspond to years before `0000`. For example, "**-2017-01-01T00:00Z**" and "**-9999-01-01T00:00Z**" are both valid datetime strings.  The field after the two digit seconds field is a nanoseconds field. It can accept between 1 and 9 digits. So, for example, "**1970-01-01T12:00:00.2Z**", "**1970-01-01T12:00:00.277Z**" and "**1970-01-01T12:00:00.123456789Z**" are all valid datetime strings.  The seconds and nanoseconds fields are optional (the seconds field must be specified if the nanoseconds field is to be used).  The [time zone offset](https://en.wikipedia.org/wiki/ISO_8601#Time_zone_designators) is compulsory for this scalar. The time zone offset must either be `Z` (representing the UTC time zone) or be in the format `Â±hh:mm:ss`. The seconds field in the timezone offset will be considered valid even though it is not part of the ISO 8601 standard."
scalar AWSDateTime
